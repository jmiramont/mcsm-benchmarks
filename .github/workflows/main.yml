# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Publish docs and results

# on: workflow_dispatch

on:
  push:
    branches: [ main ]
#   pull_request:
#     branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
  # The type of runner that the job will run on
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9"]
    runs-on: ${{ matrix.os }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout project
        uses: actions/checkout@v2

     #----------------------------------------------
     #-------  install & configure Python  ---------
     #---------------------------------------------- 
      - name: Install Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      #----------------------------------------------
      #  -----  install & configure poetry  ---------
      #----------------------------------------------
#       - name: Install Poetry
#         uses: snok/install-poetry@v1

        # with:
        #   virtualenvs-create: true
        #   virtualenvs-in-project: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
#       - name: Load cached venv
#         id: cached-poetry-dependencies
#         uses: actions/cache@v2
#         with:
#           path: .venv
#           key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
#       - name: Install main (non-optional) and dev dependencies
#         # see [tool.poetry.dependencies] and [tool.poetry.dev-dependencies]
#         # in pyproject.toml
#         if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#         run: poetry install --no-root

#       #----------------------------------------------
#       # install your root project, if required
#       #----------------------------------------------
#       - name: Install package
#         run: poetry install
        
      #----------------------------------------------
      #    deploy documentation
      #----------------------------------------------  
      - name: Create .nojekyll file.
        run: | 
          > .nojekyll
        
      - name: Deploy documentation to gh-pages branch
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: gh-pages
          FOLDER: docs/_build/html
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Publish results
      #   env:
      #     SRC_FOLDER_PATH: 'results'
      #     TARGET_BRANCH: 'gh-pages'
      #   run: |
      #     files=$(find $SRC_FOLDER_PATH -type f) # get the file list
      #     git config --global user.name 'GitHub Action'
      #     git config --global user.email 'action@github.com'
      #     git fetch                         # fetch branches
      #     git checkout $TARGET_BRANCH       # checkout to your branch
      #     git checkout ${GITHUB_REF##*/} -- $files # copy files from the source branch
      #     git add -A
      #     git diff-index --quiet HEAD ||  git commit -am "deploy files"  # commit to the repository (ignore if no modification)
      #     git push origin $TARGET_BRANCH # push to remote branch
