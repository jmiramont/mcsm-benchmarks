{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MCSM-Benchs: Using user-provided signals and performance metric\n",
    "\n",
    "`MCSM-Benchs` can be helpful to create benchmarks with signals and performance metrics provided by the user.\n",
    "This can be useful, for instance, when dealing with real-world signals and performance metrics that do not need a noiseless version of the signal.\n",
    "\n",
    "In this notebook, we create a benchmark with real-world audio signals and a performance metric that is computed based on the original signal and the processed one.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy import pi as pi\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "from mcsm_benchmarks.Benchmark import Benchmark\n",
    "from mcsm_benchmarks.ResultsInterpreter import ResultsInterpreter\n",
    "from mcsm_benchmarks.SignalBank import SignalBank\n",
    "from utils import spectrogram_thresholding, get_stft\n",
    "\n",
    "from IPython.display import Audio"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Creating a dictionary of methods\n",
    "\n",
    "Let's create a dictionary of methods to benchmark. As as example, we will compare two strategies for spectrogram thresholding.\n",
    "The first one is hard thresholding, in which the thresholding function is defined as:\n",
    "The second one is soft thresholding, here defined as:\n",
    "\n",
    "These two approaches are implemented in the python function ```thresholding(signal, lam, fun='hard')``` function, which receives a signal to clean, a positional argument ```lam``` and a keyword argument ```fun``` that can be either ```hard``` or ```soft```.\n",
    " \n",
    "Our dictionary of methods will consist then in two methods: hard thresholding and soft thresholding.\n",
    "For both approaches, let's use a value of ```lam=1.0``` for now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def method_1(noisy_signal, *args, **kwargs):\n",
    "    # If additional input parameters are needed, they can be passed in a tuple using \n",
    "    # *args or **kwargs and then parsed.\n",
    "    xr = spectrogram_thresholding(noisy_signal,1.0,fun='hard')\n",
    "    return xr\n",
    "\n",
    "def method_2(noisy_signal, *args, **kwargs):\n",
    "    # If additional input parameters are needed, they can be passed in a tuple using \n",
    "    # *args or **kwargs and then parsed.\n",
    "    xr = spectrogram_thresholding(noisy_signal,2.0,fun='soft') \n",
    "    return xr\n",
    "\n",
    "# Create a dictionary of the methods to test.\n",
    "my_methods = {\n",
    "    'Hard_Thr': method_1, \n",
    "    'Soft_Thr': method_2,\n",
    "    }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Creating a dictionary of user-provided signals\n",
    "\n",
    "We load two synthesized speech signals, and fix the length to `N=2**13` samples.\n",
    "With these signals, we create a dictionary, where the key is going to be used as an identifier of the signal in the benchmark final results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading signals and creating dictionary\n",
    "N = 2**13\n",
    "signals_dic = {\n",
    "    'speech_1': np.loadtxt('6_female.csv')[0:N],\n",
    "    'speech_2': np.loadtxt('6_male.csv')[0:N]\n",
    "            }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "                <audio  controls=\"controls\" >\n",
       "                    <source src=\"data:audio/wav;base64,\" type=\"audio/wav\" />\n",
       "                    Your browser does not support the audio element.\n",
       "                </audio>\n",
       "              "
      ],
      "text/plain": [
       "<IPython.lib.display.Audio object>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Listen to the signals\n",
    "fs = 16000\n",
    "Audio(signals_dic['speech_2'], rate=fs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Defining a performance metric\n",
    "\n",
    "We use the Perceptual Evaluation of Speech Quality (PESQ) metric as a performance metric.\n",
    "\n",
    "To do this, we first create a wrapper `perf_fun(...)` of the function `pesq(...)`.\n",
    "Performarmance metrics must follow the signature `perf_fun(x, xest, **kwargs)`, where\n",
    "- `x` is the original signal (without added noise).\n",
    "- `xest` is the output of a denoising approach.\n",
    "- `**kwargs` is used to receive a number of extra parameters passed by the benchmark class when the function `perf_fun(...)` is called."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pesq import pesq\n",
    "# Create a wrapper function for PESQ.\n",
    "# Normalize by the PESQ of the original signal.\n",
    "perf_fun = lambda x,xest,**kwargs: pesq(fs,x,xest,'nb')/pesq(fs,x,x,'nb') \n",
    "perf_fun(signals_dic['speech_1'],signals_dic['speech_1'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are ready to instantiate a `Benchmark` object and run a test using the proposed methods and parameters. The benchmark constructor receives a name of a task (which defines the performance function of the test), a dictionary of the methods to test, the desired length of the signals used in the simulation, a dictionary of different parameters that should be passed to the methods, an array with different values of SNR to test, and the number of repetitions that should be used for each test. Once the object is created, use the class method `run_test()` to start the experiments.\n",
    "\n",
    "*Remark 1: You can use the ```verbosity``` parameter to show less or more messages during the progress of the experiments. There are 6 levels of verbosity, from ```verbosity=0``` (indicate just the start and the end of the experiments) to ```verbostiy = 5``` (show each method and parameter progress)*\n",
    "\n",
    "*Remark 2: Parallelize the experiments is also possible by passing the parameter ```parallelize = True```. *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running benchmark...\n",
      "- Signal speech_1\n",
      "-- SNR: 0 dB\n",
      "--- Method: Hard_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Hard_Thr: 0\n",
      "------ Inner loop. Hard_Thr: 1\n",
      "------ Inner loop. Hard_Thr: 2\n",
      "------ Inner loop. Hard_Thr: 3\n",
      "------ Inner loop. Hard_Thr: 4\n",
      "------ Inner loop. Hard_Thr: 5\n",
      "------ Inner loop. Hard_Thr: 6\n",
      "------ Inner loop. Hard_Thr: 7\n",
      "------ Inner loop. Hard_Thr: 8\n",
      "------ Inner loop. Hard_Thr: 9\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Elapsed:0.0012466192245483398\n",
      "--- Method: Soft_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Soft_Thr: 0\n",
      "------ Inner loop. Soft_Thr: 1\n",
      "------ Inner loop. Soft_Thr: 2\n",
      "------ Inner loop. Soft_Thr: 3\n",
      "------ Inner loop. Soft_Thr: 4\n",
      "------ Inner loop. Soft_Thr: 5\n",
      "------ Inner loop. Soft_Thr: 6\n",
      "------ Inner loop. Soft_Thr: 7\n",
      "------ Inner loop. Soft_Thr: 8\n",
      "------ Inner loop. Soft_Thr: 9\n",
      "Elapsed:0.0011188507080078125\n",
      "-- SNR: 10 dB\n",
      "--- Method: Hard_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Hard_Thr: 0\n",
      "------ Inner loop. Hard_Thr: 1\n",
      "------ Inner loop. Hard_Thr: 2\n",
      "------ Inner loop. Hard_Thr: 3\n",
      "------ Inner loop. Hard_Thr: 4\n",
      "------ Inner loop. Hard_Thr: 5\n",
      "------ Inner loop. Hard_Thr: 6\n",
      "------ Inner loop. Hard_Thr: 7\n",
      "------ Inner loop. Hard_Thr: 8\n",
      "------ Inner loop. Hard_Thr: 9\n",
      "Elapsed:0.0011104822158813476\n",
      "--- Method: Soft_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Soft_Thr: 0\n",
      "------ Inner loop. Soft_Thr: 1\n",
      "------ Inner loop. Soft_Thr: 2\n",
      "------ Inner loop. Soft_Thr: 3\n",
      "------ Inner loop. Soft_Thr: 4\n",
      "------ Inner loop. Soft_Thr: 5\n",
      "------ Inner loop. Soft_Thr: 6\n",
      "------ Inner loop. Soft_Thr: 7\n",
      "------ Inner loop. Soft_Thr: 8\n",
      "------ Inner loop. Soft_Thr: 9\n",
      "Elapsed:0.0013076543807983398\n",
      "-- SNR: 20 dB\n",
      "--- Method: Hard_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Hard_Thr: 0\n",
      "------ Inner loop. Hard_Thr: 1\n",
      "------ Inner loop. Hard_Thr: 2\n",
      "------ Inner loop. Hard_Thr: 3\n",
      "------ Inner loop. Hard_Thr: 4\n",
      "------ Inner loop. Hard_Thr: 5\n",
      "------ Inner loop. Hard_Thr: 6\n",
      "------ Inner loop. Hard_Thr: 7\n",
      "------ Inner loop. Hard_Thr: 8\n",
      "------ Inner loop. Hard_Thr: 9\n",
      "Elapsed:0.0020586252212524414\n",
      "--- Method: Soft_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Soft_Thr: 0\n",
      "------ Inner loop. Soft_Thr: 1\n",
      "------ Inner loop. Soft_Thr: 2\n",
      "------ Inner loop. Soft_Thr: 3\n",
      "------ Inner loop. Soft_Thr: 4\n",
      "------ Inner loop. Soft_Thr: 5\n",
      "------ Inner loop. Soft_Thr: 6\n",
      "------ Inner loop. Soft_Thr: 7\n",
      "------ Inner loop. Soft_Thr: 8\n",
      "------ Inner loop. Soft_Thr: 9\n",
      "Elapsed:0.0015439748764038085\n",
      "- Signal speech_2\n",
      "-- SNR: 0 dB\n",
      "--- Method: Hard_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Hard_Thr: 0\n",
      "------ Inner loop. Hard_Thr: 1\n",
      "------ Inner loop. Hard_Thr: 2\n",
      "------ Inner loop. Hard_Thr: 3\n",
      "------ Inner loop. Hard_Thr: 4\n",
      "------ Inner loop. Hard_Thr: 5\n",
      "------ Inner loop. Hard_Thr: 6\n",
      "------ Inner loop. Hard_Thr: 7\n",
      "------ Inner loop. Hard_Thr: 8\n",
      "------ Inner loop. Hard_Thr: 9\n",
      "Elapsed:0.0011633634567260742\n",
      "--- Method: Soft_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Soft_Thr: 0\n",
      "------ Inner loop. Soft_Thr: 1\n",
      "------ Inner loop. Soft_Thr: 2\n",
      "------ Inner loop. Soft_Thr: 3\n",
      "------ Inner loop. Soft_Thr: 4\n",
      "------ Inner loop. Soft_Thr: 5\n",
      "------ Inner loop. Soft_Thr: 6\n",
      "------ Inner loop. Soft_Thr: 7\n",
      "------ Inner loop. Soft_Thr: 8\n",
      "------ Inner loop. Soft_Thr: 9\n",
      "Elapsed:0.001230931282043457\n",
      "-- SNR: 10 dB\n",
      "--- Method: Hard_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Hard_Thr: 0\n",
      "------ Inner loop. Hard_Thr: 1\n",
      "------ Inner loop. Hard_Thr: 2\n",
      "------ Inner loop. Hard_Thr: 3\n",
      "------ Inner loop. Hard_Thr: 4\n",
      "------ Inner loop. Hard_Thr: 5\n",
      "------ Inner loop. Hard_Thr: 6\n",
      "------ Inner loop. Hard_Thr: 7\n",
      "------ Inner loop. Hard_Thr: 8\n",
      "------ Inner loop. Hard_Thr: 9\n",
      "Elapsed:0.0011851072311401367\n",
      "--- Method: Soft_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Soft_Thr: 0\n",
      "------ Inner loop. Soft_Thr: 1\n",
      "------ Inner loop. Soft_Thr: 2\n",
      "------ Inner loop. Soft_Thr: 3\n",
      "------ Inner loop. Soft_Thr: 4\n",
      "------ Inner loop. Soft_Thr: 5\n",
      "------ Inner loop. Soft_Thr: 6\n",
      "------ Inner loop. Soft_Thr: 7\n",
      "------ Inner loop. Soft_Thr: 8\n",
      "------ Inner loop. Soft_Thr: 9\n",
      "Elapsed:0.0016048908233642577\n",
      "-- SNR: 20 dB\n",
      "--- Method: Hard_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Hard_Thr: 0\n",
      "------ Inner loop. Hard_Thr: 1\n",
      "------ Inner loop. Hard_Thr: 2\n",
      "------ Inner loop. Hard_Thr: 3\n",
      "------ Inner loop. Hard_Thr: 4\n",
      "------ Inner loop. Hard_Thr: 5\n",
      "------ Inner loop. Hard_Thr: 6\n",
      "------ Inner loop. Hard_Thr: 7\n",
      "------ Inner loop. Hard_Thr: 8\n",
      "------ Inner loop. Hard_Thr: 9\n",
      "Elapsed:0.0013822078704833984\n",
      "--- Method: Soft_Thr\n",
      "---- Parameters Combination: 0\n",
      "------ Inner loop. Soft_Thr: 0\n",
      "------ Inner loop. Soft_Thr: 1\n",
      "------ Inner loop. Soft_Thr: 2\n",
      "------ Inner loop. Soft_Thr: 3\n",
      "------ Inner loop. Soft_Thr: 4\n",
      "------ Inner loop. Soft_Thr: 5\n",
      "------ Inner loop. Soft_Thr: 6\n",
      "------ Inner loop. Soft_Thr: 7\n",
      "------ Inner loop. Soft_Thr: 8\n",
      "------ Inner loop. Soft_Thr: 9\n",
      "Elapsed:0.0009479045867919922\n",
      "The test has finished.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'speech_1': {0: {'Hard_Thr': {'((), {})': [0.2511395364342408,\n",
       "     0.2461274473524261,\n",
       "     0.24798206052382246,\n",
       "     0.24903602886032414,\n",
       "     0.25248074101920226,\n",
       "     0.24812297925630133,\n",
       "     0.2511082182483914,\n",
       "     0.24970204480759678,\n",
       "     0.2556525263266698,\n",
       "     0.25082087716918405]},\n",
       "   'Soft_Thr': {'((), {})': [0.38184138562766257,\n",
       "     0.3922177951032719,\n",
       "     0.3993604380918875,\n",
       "     0.39816374269251065,\n",
       "     0.3957185392967492,\n",
       "     0.3571817867897743,\n",
       "     0.41715561474532525,\n",
       "     0.3320869831031704,\n",
       "     0.43982232865571547,\n",
       "     0.4379489245728095]}},\n",
       "  10: {'Hard_Thr': {'((), {})': [0.3440405973843051,\n",
       "     0.330535278377002,\n",
       "     0.33822233364565907,\n",
       "     0.3360254218756192,\n",
       "     0.35587281765970386,\n",
       "     0.33944258975556196,\n",
       "     0.36001475912095643,\n",
       "     0.35617436330521285,\n",
       "     0.37176605005919794,\n",
       "     0.35220059657081854]},\n",
       "   'Soft_Thr': {'((), {})': [0.6365218164317165,\n",
       "     0.6189570053461585,\n",
       "     0.6617306759717234,\n",
       "     0.6720790956377201,\n",
       "     0.5971860701741217,\n",
       "     0.6626136129434943,\n",
       "     0.6275843662132178,\n",
       "     0.5505742838015738,\n",
       "     0.6896185900977295,\n",
       "     0.6554815054450138]}},\n",
       "  20: {'Hard_Thr': {'((), {})': [0.5987278159792669,\n",
       "     0.564343750085175,\n",
       "     0.5915853826521467,\n",
       "     0.5900841539309538,\n",
       "     0.612433649999067,\n",
       "     0.5964106895494018,\n",
       "     0.6361617752290395,\n",
       "     0.6427870784781846,\n",
       "     0.664244097976494,\n",
       "     0.6376985939890468]},\n",
       "   'Soft_Thr': {'((), {})': [0.7878309532909831,\n",
       "     0.7746923584465173,\n",
       "     0.7823201581350862,\n",
       "     0.7898279790330118,\n",
       "     0.7848373540467709,\n",
       "     0.7997702319673817,\n",
       "     0.7534140753728882,\n",
       "     0.78661916226395,\n",
       "     0.7804121861131548,\n",
       "     0.7597816522290267]}}},\n",
       " 'speech_2': {0: {'Hard_Thr': {'((), {})': [0.2511395364342408,\n",
       "     0.2461274473524261,\n",
       "     0.24798206052382246,\n",
       "     0.24903602886032414,\n",
       "     0.25248074101920226,\n",
       "     0.24812297925630133,\n",
       "     0.2511082182483914,\n",
       "     0.24970204480759678,\n",
       "     0.2556525263266698,\n",
       "     0.25082087716918405]},\n",
       "   'Soft_Thr': {'((), {})': [0.38184138562766257,\n",
       "     0.3922177951032719,\n",
       "     0.3993604380918875,\n",
       "     0.39816374269251065,\n",
       "     0.3957185392967492,\n",
       "     0.3571817867897743,\n",
       "     0.41715561474532525,\n",
       "     0.3320869831031704,\n",
       "     0.43982232865571547,\n",
       "     0.4379489245728095]}},\n",
       "  10: {'Hard_Thr': {'((), {})': [0.3440405973843051,\n",
       "     0.330535278377002,\n",
       "     0.33822233364565907,\n",
       "     0.3360254218756192,\n",
       "     0.35587281765970386,\n",
       "     0.33944258975556196,\n",
       "     0.36001475912095643,\n",
       "     0.35617436330521285,\n",
       "     0.37176605005919794,\n",
       "     0.35220059657081854]},\n",
       "   'Soft_Thr': {'((), {})': [0.6365218164317165,\n",
       "     0.6189570053461585,\n",
       "     0.6617306759717234,\n",
       "     0.6720790956377201,\n",
       "     0.5971860701741217,\n",
       "     0.6626136129434943,\n",
       "     0.6275843662132178,\n",
       "     0.5505742838015738,\n",
       "     0.6896185900977295,\n",
       "     0.6554815054450138]}},\n",
       "  20: {'Hard_Thr': {'((), {})': [0.5987278159792669,\n",
       "     0.564343750085175,\n",
       "     0.5915853826521467,\n",
       "     0.5900841539309538,\n",
       "     0.612433649999067,\n",
       "     0.5964106895494018,\n",
       "     0.6361617752290395,\n",
       "     0.6427870784781846,\n",
       "     0.664244097976494,\n",
       "     0.6376985939890468]},\n",
       "   'Soft_Thr': {'((), {})': [0.7878309532909831,\n",
       "     0.7746923584465173,\n",
       "     0.7823201581350862,\n",
       "     0.7898279790330118,\n",
       "     0.7848373540467709,\n",
       "     0.7997702319673817,\n",
       "     0.7534140753728882,\n",
       "     0.78661916226395,\n",
       "     0.7804121861131548,\n",
       "     0.7597816522290267]}}}}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "benchmark = Benchmark(task = 'denoising',\n",
    "                      N = N,\n",
    "                        methods = my_methods, \n",
    "                        SNRin = [0,10,20], \n",
    "                        repetitions = 10,\n",
    "                        signal_ids=signals_dic, # Input user-defined signals\n",
    "                        verbosity=5,\n",
    "                        obj_fun=perf_fun, # Define a performance metric\n",
    "                        )\n",
    "                        \n",
    "benchmark.run_test() # Run the benchmark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Method</th>\n",
       "      <th>Parameter</th>\n",
       "      <th>Signal_id</th>\n",
       "      <th>Repetition</th>\n",
       "      <th>0</th>\n",
       "      <th>10</th>\n",
       "      <th>20</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.251140</td>\n",
       "      <td>0.344041</td>\n",
       "      <td>0.598728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.246127</td>\n",
       "      <td>0.330535</td>\n",
       "      <td>0.564344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.247982</td>\n",
       "      <td>0.338222</td>\n",
       "      <td>0.591585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.249036</td>\n",
       "      <td>0.336025</td>\n",
       "      <td>0.590084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.252481</td>\n",
       "      <td>0.355873</td>\n",
       "      <td>0.612434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>5</td>\n",
       "      <td>0.248123</td>\n",
       "      <td>0.339443</td>\n",
       "      <td>0.596411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>6</td>\n",
       "      <td>0.251108</td>\n",
       "      <td>0.360015</td>\n",
       "      <td>0.636162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>7</td>\n",
       "      <td>0.249702</td>\n",
       "      <td>0.356174</td>\n",
       "      <td>0.642787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.255653</td>\n",
       "      <td>0.371766</td>\n",
       "      <td>0.664244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>9</td>\n",
       "      <td>0.250821</td>\n",
       "      <td>0.352201</td>\n",
       "      <td>0.637699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.251140</td>\n",
       "      <td>0.344041</td>\n",
       "      <td>0.598728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.246127</td>\n",
       "      <td>0.330535</td>\n",
       "      <td>0.564344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.247982</td>\n",
       "      <td>0.338222</td>\n",
       "      <td>0.591585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>3</td>\n",
       "      <td>0.249036</td>\n",
       "      <td>0.336025</td>\n",
       "      <td>0.590084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>4</td>\n",
       "      <td>0.252481</td>\n",
       "      <td>0.355873</td>\n",
       "      <td>0.612434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>5</td>\n",
       "      <td>0.248123</td>\n",
       "      <td>0.339443</td>\n",
       "      <td>0.596411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>6</td>\n",
       "      <td>0.251108</td>\n",
       "      <td>0.360015</td>\n",
       "      <td>0.636162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>7</td>\n",
       "      <td>0.249702</td>\n",
       "      <td>0.356174</td>\n",
       "      <td>0.642787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>8</td>\n",
       "      <td>0.255653</td>\n",
       "      <td>0.371766</td>\n",
       "      <td>0.664244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Hard_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>9</td>\n",
       "      <td>0.250821</td>\n",
       "      <td>0.352201</td>\n",
       "      <td>0.637699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.381841</td>\n",
       "      <td>0.636522</td>\n",
       "      <td>0.787831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.392218</td>\n",
       "      <td>0.618957</td>\n",
       "      <td>0.774692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>2</td>\n",
       "      <td>0.399360</td>\n",
       "      <td>0.661731</td>\n",
       "      <td>0.782320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.398164</td>\n",
       "      <td>0.672079</td>\n",
       "      <td>0.789828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.395719</td>\n",
       "      <td>0.597186</td>\n",
       "      <td>0.784837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>5</td>\n",
       "      <td>0.357182</td>\n",
       "      <td>0.662614</td>\n",
       "      <td>0.799770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>6</td>\n",
       "      <td>0.417156</td>\n",
       "      <td>0.627584</td>\n",
       "      <td>0.753414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>7</td>\n",
       "      <td>0.332087</td>\n",
       "      <td>0.550574</td>\n",
       "      <td>0.786619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.439822</td>\n",
       "      <td>0.689619</td>\n",
       "      <td>0.780412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_1</td>\n",
       "      <td>9</td>\n",
       "      <td>0.437949</td>\n",
       "      <td>0.655482</td>\n",
       "      <td>0.759782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.381841</td>\n",
       "      <td>0.636522</td>\n",
       "      <td>0.787831</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>1</td>\n",
       "      <td>0.392218</td>\n",
       "      <td>0.618957</td>\n",
       "      <td>0.774692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>2</td>\n",
       "      <td>0.399360</td>\n",
       "      <td>0.661731</td>\n",
       "      <td>0.782320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>3</td>\n",
       "      <td>0.398164</td>\n",
       "      <td>0.672079</td>\n",
       "      <td>0.789828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>4</td>\n",
       "      <td>0.395719</td>\n",
       "      <td>0.597186</td>\n",
       "      <td>0.784837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>5</td>\n",
       "      <td>0.357182</td>\n",
       "      <td>0.662614</td>\n",
       "      <td>0.799770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>6</td>\n",
       "      <td>0.417156</td>\n",
       "      <td>0.627584</td>\n",
       "      <td>0.753414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>7</td>\n",
       "      <td>0.332087</td>\n",
       "      <td>0.550574</td>\n",
       "      <td>0.786619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>8</td>\n",
       "      <td>0.439822</td>\n",
       "      <td>0.689619</td>\n",
       "      <td>0.780412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Soft_Thr</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>speech_2</td>\n",
       "      <td>9</td>\n",
       "      <td>0.437949</td>\n",
       "      <td>0.655482</td>\n",
       "      <td>0.759782</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Method Parameter Signal_id  Repetition         0        10        20\n",
       "0   Hard_Thr  ((), {})  speech_1           0  0.251140  0.344041  0.598728\n",
       "1   Hard_Thr  ((), {})  speech_1           1  0.246127  0.330535  0.564344\n",
       "2   Hard_Thr  ((), {})  speech_1           2  0.247982  0.338222  0.591585\n",
       "3   Hard_Thr  ((), {})  speech_1           3  0.249036  0.336025  0.590084\n",
       "4   Hard_Thr  ((), {})  speech_1           4  0.252481  0.355873  0.612434\n",
       "5   Hard_Thr  ((), {})  speech_1           5  0.248123  0.339443  0.596411\n",
       "6   Hard_Thr  ((), {})  speech_1           6  0.251108  0.360015  0.636162\n",
       "7   Hard_Thr  ((), {})  speech_1           7  0.249702  0.356174  0.642787\n",
       "8   Hard_Thr  ((), {})  speech_1           8  0.255653  0.371766  0.664244\n",
       "9   Hard_Thr  ((), {})  speech_1           9  0.250821  0.352201  0.637699\n",
       "20  Hard_Thr  ((), {})  speech_2           0  0.251140  0.344041  0.598728\n",
       "21  Hard_Thr  ((), {})  speech_2           1  0.246127  0.330535  0.564344\n",
       "22  Hard_Thr  ((), {})  speech_2           2  0.247982  0.338222  0.591585\n",
       "23  Hard_Thr  ((), {})  speech_2           3  0.249036  0.336025  0.590084\n",
       "24  Hard_Thr  ((), {})  speech_2           4  0.252481  0.355873  0.612434\n",
       "25  Hard_Thr  ((), {})  speech_2           5  0.248123  0.339443  0.596411\n",
       "26  Hard_Thr  ((), {})  speech_2           6  0.251108  0.360015  0.636162\n",
       "27  Hard_Thr  ((), {})  speech_2           7  0.249702  0.356174  0.642787\n",
       "28  Hard_Thr  ((), {})  speech_2           8  0.255653  0.371766  0.664244\n",
       "29  Hard_Thr  ((), {})  speech_2           9  0.250821  0.352201  0.637699\n",
       "10  Soft_Thr  ((), {})  speech_1           0  0.381841  0.636522  0.787831\n",
       "11  Soft_Thr  ((), {})  speech_1           1  0.392218  0.618957  0.774692\n",
       "12  Soft_Thr  ((), {})  speech_1           2  0.399360  0.661731  0.782320\n",
       "13  Soft_Thr  ((), {})  speech_1           3  0.398164  0.672079  0.789828\n",
       "14  Soft_Thr  ((), {})  speech_1           4  0.395719  0.597186  0.784837\n",
       "15  Soft_Thr  ((), {})  speech_1           5  0.357182  0.662614  0.799770\n",
       "16  Soft_Thr  ((), {})  speech_1           6  0.417156  0.627584  0.753414\n",
       "17  Soft_Thr  ((), {})  speech_1           7  0.332087  0.550574  0.786619\n",
       "18  Soft_Thr  ((), {})  speech_1           8  0.439822  0.689619  0.780412\n",
       "19  Soft_Thr  ((), {})  speech_1           9  0.437949  0.655482  0.759782\n",
       "30  Soft_Thr  ((), {})  speech_2           0  0.381841  0.636522  0.787831\n",
       "31  Soft_Thr  ((), {})  speech_2           1  0.392218  0.618957  0.774692\n",
       "32  Soft_Thr  ((), {})  speech_2           2  0.399360  0.661731  0.782320\n",
       "33  Soft_Thr  ((), {})  speech_2           3  0.398164  0.672079  0.789828\n",
       "34  Soft_Thr  ((), {})  speech_2           4  0.395719  0.597186  0.784837\n",
       "35  Soft_Thr  ((), {})  speech_2           5  0.357182  0.662614  0.799770\n",
       "36  Soft_Thr  ((), {})  speech_2           6  0.417156  0.627584  0.753414\n",
       "37  Soft_Thr  ((), {})  speech_2           7  0.332087  0.550574  0.786619\n",
       "38  Soft_Thr  ((), {})  speech_2           8  0.439822  0.689619  0.780412\n",
       "39  Soft_Thr  ((), {})  speech_2           9  0.437949  0.655482  0.759782"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df = benchmark.get_results_as_df() # This formats the results on a DataFrame\n",
    "results_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating plots with the Results Interpreter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "linkText": "Export to plot.ly",
        "plotlyServerURL": "https://plot.ly",
        "showLink": false
       },
       "data": [
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "0",
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.00253857578568054,
           0.012193020301849466,
           0.029134318869177826
          ],
          "arrayminus": [
           0.00253857578568054,
           0.012193020301849466,
           0.029134318869177826
          ]
         },
         "hovertemplate": "Method + Param=Hard_Thr<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Hard_Thr",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Hard_Thr",
         "offsetgroup": "Hard_Thr",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "0",
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          0.2502172459998159,
          0.34842948077540364,
          0.6134476987868775
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "0",
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.03153251020657306,
           0.038829014374214814,
           0.01328638795481779
          ],
          "arrayminus": [
           0.03153251020657306,
           0.038829014374214814,
           0.01328638795481779
          ]
         },
         "hovertemplate": "Method + Param=Soft_Thr<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Soft_Thr",
         "marker": {
          "color": "#EF553B",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Soft_Thr",
         "offsetgroup": "Soft_Thr",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "0",
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          0.3951497538678877,
          0.637234702206247,
          0.7799506110898771
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "group",
        "legend": {
         "title": {
          "text": "Method + Param"
         },
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "speech_1"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "SNRin"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "PESQ(x_est)/PESQ(x)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "linkText": "Export to plot.ly",
        "plotlyServerURL": "https://plot.ly",
        "showLink": false
       },
       "data": [
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "0",
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.00253857578568054,
           0.012193020301849466,
           0.029134318869177826
          ],
          "arrayminus": [
           0.00253857578568054,
           0.012193020301849466,
           0.029134318869177826
          ]
         },
         "hovertemplate": "Method + Param=Hard_Thr<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Hard_Thr",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Hard_Thr",
         "offsetgroup": "Hard_Thr",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "0",
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          0.2502172459998159,
          0.34842948077540364,
          0.6134476987868775
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "0",
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.03153251020657306,
           0.038829014374214814,
           0.01328638795481779
          ],
          "arrayminus": [
           0.03153251020657306,
           0.038829014374214814,
           0.01328638795481779
          ]
         },
         "hovertemplate": "Method + Param=Soft_Thr<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Soft_Thr",
         "marker": {
          "color": "#EF553B",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Soft_Thr",
         "offsetgroup": "Soft_Thr",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "0",
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          0.3951497538678877,
          0.637234702206247,
          0.7799506110898771
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "group",
        "legend": {
         "title": {
          "text": "Method + Param"
         },
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "speech_2"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "SNRin"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "PESQ(x_est)/PESQ(x)"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Summary interactive plots with Plotly\n",
    "from plotly.offline import  iplot\n",
    "interpreter = ResultsInterpreter(benchmark)\n",
    "figs = interpreter.get_summary_plotlys(bars=True)\n",
    "for fig in figs:\n",
    "    fig.update_layout(yaxis_title=\"PESQ(x_est)/PESQ(x)\")\n",
    "    iplot(fig)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking elapsed time for each method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean</th>\n",
       "      <th>Std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Hard_Thr-((), {})</th>\n",
       "      <td>0.001382</td>\n",
       "      <td>0.000186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Soft_Thr-((), {})</th>\n",
       "      <td>0.000948</td>\n",
       "      <td>0.000220</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       Mean       Std\n",
       "Hard_Thr-((), {})  0.001382  0.000186\n",
       "Soft_Thr-((), {})  0.000948  0.000220"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = interpreter.elapsed_time_summary()\n",
    "df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.15 ('.venv': poetry)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "b570b39bfc168d016e4ca94377b5ca5dd1b2801911d7fb4ef826f34fdaae4407"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
