{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  MCSM-Benchs: Benchmarks with personalized noise-generating functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy import pi as pi\n",
    "import pandas as pd\n",
    "import scipy.signal as sg\n",
    "from matplotlib import pyplot as plt\n",
    "from mcsm_benchs.Benchmark import Benchmark\n",
    "from mcsm_benchs.ResultsInterpreter import ResultsInterpreter\n",
    "from utils import spectrogram_thresholding, get_stft\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating a a dummy dictionary of methods \n",
    "First let us define a dummy method for testing. Methods should receive a numpy array with shape  ```(N,)``` where `N` is the number of time samples of the signal. Additionally, they can receive any number of positional or keyword arguments to allow testing different combinations of input parameters. The shape of the output depends on the task (signal denoising or detection). So the recommended signature of a method should be the following:\n",
    "\n",
    " `output = a_method(noisy_signal, *args, **kwargs) `.\n",
    "\n",
    "If one set `task='denoising'`, `output` shoud be a `(N,)` numpy array, i.e. the same shape as the input parameter `noisy_signal`, whereas if `task='detection'`, the output should be boolean (`0` or `False` for no signal, and `1` or `True` otherwise).\n",
    "\n",
    "After this, we need to create a *dictionary of methods* to pass the `Benchmark` object at the moment of instantiation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def method_1(noisy_signal, *args, **kwargs):\n",
    "    # If additional input parameters are needed, they can be passed in a tuple using \n",
    "    # *args or **kwargs and then parsed.\n",
    "    xr = spectrogram_thresholding(noisy_signal,1.0,fun='hard')\n",
    "    return xr\n",
    "\n",
    "def method_2(noisy_signal, *args, **kwargs):\n",
    "    # If additional input parameters are needed, they can be passed in a tuple using \n",
    "    # *args or **kwargs and then parsed.\n",
    "    xr = spectrogram_thresholding(noisy_signal,2.0,fun='soft') \n",
    "    return xr\n",
    "\n",
    "# Create a dictionary of the methods to test.\n",
    "my_methods = {\n",
    "    'Method 1': method_1, \n",
    "    'Method 2': method_2,\n",
    "    }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Benchmarks with different kinds of noise"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are ready to instantiate a `Benchmark` object and run a benchmark using the proposed methods.\n",
    "\n",
    "The `Benchmark` constructor receives a number of input parameters.\n",
    "The parameter `complex_noise` can be `True` or `False` indicating if the simulations are to be done using white complex Gaussian noise or not.\n",
    "However, if a function is passed instead of a `bool` variable, the function is called in order to obtain a different realization of noise.\n",
    "The noise generator function must receive an `int` variable indicating the length of the time series to generate:\n",
    "`noise = noise_generator_fun(N,) `.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Real White Gaussian noise (default)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Benchmark class uses np.random.randn(N,) to generate noise realizations\n",
    "n = np.random.randn(1024)\n",
    "\n",
    "f, Pxx_den = sg.welch(n)\n",
    "plt.semilogy(f, Pxx_den)\n",
    "plt.xlabel('frequency')\n",
    "plt.ylabel('PSD')\n",
    "plt.title('White (Gaussian) Noise')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running benchmark...\n",
      "- Signal LinearChirp\n",
      "- Signal CosChirp\n",
      "The test has finished.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Method</th>\n",
       "      <th>Parameter</th>\n",
       "      <th>Signal_id</th>\n",
       "      <th>Repetition</th>\n",
       "      <th>40</th>\n",
       "      <th>50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>43.971518</td>\n",
       "      <td>53.561819</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>44.544033</td>\n",
       "      <td>54.096559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>43.790454</td>\n",
       "      <td>53.448276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>44.068673</td>\n",
       "      <td>53.993409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>44.457192</td>\n",
       "      <td>54.644148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>43.631709</td>\n",
       "      <td>53.708958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>44.440979</td>\n",
       "      <td>53.041674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>45.302902</td>\n",
       "      <td>53.894885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>43.900369</td>\n",
       "      <td>52.533425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>45.837933</td>\n",
       "      <td>54.778613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>46.834068</td>\n",
       "      <td>55.405637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>45.081570</td>\n",
       "      <td>54.310658</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Method Parameter    Signal_id  Repetition         40         50\n",
       "6   Method 1  ((), {})     CosChirp           0  43.971518  53.561819\n",
       "7   Method 1  ((), {})     CosChirp           1  44.544033  54.096559\n",
       "8   Method 1  ((), {})     CosChirp           2  43.790454  53.448276\n",
       "0   Method 1  ((), {})  LinearChirp           0  44.068673  53.993409\n",
       "1   Method 1  ((), {})  LinearChirp           1  44.457192  54.644148\n",
       "2   Method 1  ((), {})  LinearChirp           2  43.631709  53.708958\n",
       "9   Method 2  ((), {})     CosChirp           0  44.440979  53.041674\n",
       "10  Method 2  ((), {})     CosChirp           1  45.302902  53.894885\n",
       "11  Method 2  ((), {})     CosChirp           2  43.900369  52.533425\n",
       "3   Method 2  ((), {})  LinearChirp           0  45.837933  54.778613\n",
       "4   Method 2  ((), {})  LinearChirp           1  46.834068  55.405637\n",
       "5   Method 2  ((), {})  LinearChirp           2  45.081570  54.310658"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "benchmark = Benchmark(task = 'denoising', # defines the default performance function\n",
    "                        methods = my_methods, # dictionary of methods\n",
    "                        N = 256,  # Length of the signals\n",
    "                        SNRin = [40, 50], # SNRs to use during the test\n",
    "                        repetitions = 3, # Number of noise realizations to use\n",
    "                        signal_ids=['LinearChirp', 'CosChirp',], # Signals to use\n",
    "                        complex_noise=False # Real white Gaussian Noise\n",
    "                        ) \n",
    "                        \n",
    "benchmark.run_test() # Run the test.\n",
    "results_df = benchmark.get_results_as_df() # This formats the results on a DataFrame\n",
    "results_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pink noise\n",
    "Let's first import a function to generate colored noise, and later pass it as a parameter to the ```Benchmark``` class constructor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from utils import voss\n",
    "\n",
    "#Generates pink noise using the Voss-McCartney algorithm.\n",
    "noise_fun = lambda N : voss(N,)\n",
    "n = noise_fun(1024)\n",
    "\n",
    "f, Pxx_den = sg.welch(n)\n",
    "plt.semilogy(f, Pxx_den)\n",
    "plt.xlabel('frequency')\n",
    "plt.ylabel('PSD')\n",
    "plt.title('\"Pink\" Noise')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running benchmark...\n",
      "- Signal LinearChirp\n",
      "- Signal CosChirp\n",
      "The test has finished.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Method</th>\n",
       "      <th>Parameter</th>\n",
       "      <th>Signal_id</th>\n",
       "      <th>Repetition</th>\n",
       "      <th>40</th>\n",
       "      <th>50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>42.020270</td>\n",
       "      <td>52.501531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>40.377870</td>\n",
       "      <td>51.031590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>41.166749</td>\n",
       "      <td>51.429858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>41.639466</td>\n",
       "      <td>51.749439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>40.305414</td>\n",
       "      <td>50.365133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>41.417004</td>\n",
       "      <td>51.518874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>46.549252</td>\n",
       "      <td>56.121017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>44.205250</td>\n",
       "      <td>54.954600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>45.150989</td>\n",
       "      <td>54.085905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>45.450849</td>\n",
       "      <td>55.530805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>43.357571</td>\n",
       "      <td>53.631834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>45.650857</td>\n",
       "      <td>55.403165</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Method Parameter    Signal_id  Repetition         40         50\n",
       "6   Method 1  ((), {})     CosChirp           0  42.020270  52.501531\n",
       "7   Method 1  ((), {})     CosChirp           1  40.377870  51.031590\n",
       "8   Method 1  ((), {})     CosChirp           2  41.166749  51.429858\n",
       "0   Method 1  ((), {})  LinearChirp           0  41.639466  51.749439\n",
       "1   Method 1  ((), {})  LinearChirp           1  40.305414  50.365133\n",
       "2   Method 1  ((), {})  LinearChirp           2  41.417004  51.518874\n",
       "9   Method 2  ((), {})     CosChirp           0  46.549252  56.121017\n",
       "10  Method 2  ((), {})     CosChirp           1  44.205250  54.954600\n",
       "11  Method 2  ((), {})     CosChirp           2  45.150989  54.085905\n",
       "3   Method 2  ((), {})  LinearChirp           0  45.450849  55.530805\n",
       "4   Method 2  ((), {})  LinearChirp           1  43.357571  53.631834\n",
       "5   Method 2  ((), {})  LinearChirp           2  45.650857  55.403165"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "benchmark = Benchmark(task = 'denoising', # defines the default performance function\n",
    "                        methods = my_methods, # dictionary of methods\n",
    "                        N = 256,  # Length of the signals\n",
    "                        SNRin = [40, 50], # SNRs to use during the test\n",
    "                        repetitions = 3, # Number of noise realizations to use\n",
    "                        signal_ids=['LinearChirp', 'CosChirp',], # Signals to use\n",
    "                        complex_noise=noise_fun # \"Pink\" Noise\n",
    "                        ) \n",
    "                        \n",
    "benchmark.run_test() # Run the test.\n",
    "results_df = benchmark.get_results_as_df() # This formats the results on a DataFrame\n",
    "results_df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.15 ('.venv': poetry)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "b570b39bfc168d016e4ca94377b5ca5dd1b2801911d7fb4ef826f34fdaae4407"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
