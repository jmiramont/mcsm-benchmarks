{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  MCSM-Benchs: Benchmarks with personalized noise-generating functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy import pi as pi\n",
    "import pandas as pd\n",
    "import scipy.signal as sg\n",
    "from matplotlib import pyplot as plt\n",
    "from mcsm_benchs.Benchmark import Benchmark\n",
    "from mcsm_benchs.ResultsInterpreter import ResultsInterpreter\n",
    "from utils import spectrogram_thresholding, get_stft\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating a dummy dictionary of methods \n",
    "First let us define a dummy method for testing. Methods should receive a numpy array with shape  ```(N,)``` where `N` is the number of time samples of the signal. Additionally, they can receive any number of positional or keyword arguments to allow testing different combinations of input parameters. The shape of the output depends on the task (signal denoising or detection). So the recommended signature of a method should be the following:\n",
    "\n",
    " `output = a_method(noisy_signal, *args, **kwargs) `.\n",
    "\n",
    "If one set `task='denoising'`, `output` shoud be a `(N,)` numpy array, i.e. the same shape as the input parameter `noisy_signal`, whereas if `task='detection'`, the output should be boolean (`0` or `False` for no signal, and `1` or `True` otherwise).\n",
    "\n",
    "After this, we need to create a *dictionary of methods* to pass the `Benchmark` object at the moment of instantiation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def method_1(noisy_signal, *args, **kwargs):\n",
    "    # If additional input parameters are needed, they can be passed in a tuple using \n",
    "    # *args or **kwargs and then parsed.\n",
    "    xr = spectrogram_thresholding(noisy_signal,1.0,fun='hard')\n",
    "    return xr\n",
    "\n",
    "def method_2(noisy_signal, *args, **kwargs):\n",
    "    # If additional input parameters are needed, they can be passed in a tuple using \n",
    "    # *args or **kwargs and then parsed.\n",
    "    xr = spectrogram_thresholding(noisy_signal,2.0,fun='soft') \n",
    "    return xr\n",
    "\n",
    "# Create a dictionary of the methods to test.\n",
    "my_methods = {\n",
    "    'Method 1': method_1, \n",
    "    'Method 2': method_2,\n",
    "    }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Benchmarks with different kinds of noise"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are ready to instantiate a `Benchmark` object and run a benchmark using the proposed methods.\n",
    "\n",
    "The `Benchmark` constructor receives a number of input parameters.\n",
    "The parameter `complex_noise` can be `True` or `False` indicating if the simulations are to be done using white complex Gaussian noise or not.\n",
    "However, if a function is passed instead of a `bool` variable, the function is called in order to obtain a different realization of noise.\n",
    "The noise generator function must receive an `int` variable indicating the length of the time series to generate:\n",
    "`noise = noise_generator_fun(N,) `.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Real White Gaussian noise (default)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Benchmark class uses np.random.randn(N,) to generate noise realizations\n",
    "n = np.random.randn(1024)\n",
    "\n",
    "f, Pxx_den = sg.welch(n)\n",
    "plt.semilogy(f, Pxx_den)\n",
    "plt.xlabel('frequency')\n",
    "plt.ylabel('PSD')\n",
    "plt.title('White (Gaussian) Noise')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running benchmark...\n",
      "- Signal LinearChirp\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/2 [00:00<?, ?it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2/2 [00:00<00:00, 130.76it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "- Signal CosChirp\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2/2 [00:00<00:00, 276.24it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The test has finished.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Method</th>\n",
       "      <th>Parameter</th>\n",
       "      <th>Signal_id</th>\n",
       "      <th>Repetition</th>\n",
       "      <th>40</th>\n",
       "      <th>50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>35.810596</td>\n",
       "      <td>35.848604</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>35.076937</td>\n",
       "      <td>36.675817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>34.878397</td>\n",
       "      <td>35.250035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>40.716980</td>\n",
       "      <td>45.830269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>40.761751</td>\n",
       "      <td>44.879363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>40.506275</td>\n",
       "      <td>44.715266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>22.325833</td>\n",
       "      <td>21.801351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>20.850857</td>\n",
       "      <td>21.708549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>21.080309</td>\n",
       "      <td>21.317084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>35.733726</td>\n",
       "      <td>37.497704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>35.193784</td>\n",
       "      <td>36.680307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>36.448123</td>\n",
       "      <td>37.518342</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Method Parameter    Signal_id  Repetition         40         50\n",
       "6   Method 1  ((), {})     CosChirp           0  35.810596  35.848604\n",
       "7   Method 1  ((), {})     CosChirp           1  35.076937  36.675817\n",
       "8   Method 1  ((), {})     CosChirp           2  34.878397  35.250035\n",
       "0   Method 1  ((), {})  LinearChirp           0  40.716980  45.830269\n",
       "1   Method 1  ((), {})  LinearChirp           1  40.761751  44.879363\n",
       "2   Method 1  ((), {})  LinearChirp           2  40.506275  44.715266\n",
       "9   Method 2  ((), {})     CosChirp           0  22.325833  21.801351\n",
       "10  Method 2  ((), {})     CosChirp           1  20.850857  21.708549\n",
       "11  Method 2  ((), {})     CosChirp           2  21.080309  21.317084\n",
       "3   Method 2  ((), {})  LinearChirp           0  35.733726  37.497704\n",
       "4   Method 2  ((), {})  LinearChirp           1  35.193784  36.680307\n",
       "5   Method 2  ((), {})  LinearChirp           2  36.448123  37.518342"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "benchmark = Benchmark(task = 'denoising', # defines the default performance function\n",
    "                        methods = my_methods, # dictionary of methods\n",
    "                        N = 256,  # Length of the signals\n",
    "                        SNRin = [40, 50], # SNRs to use during the test\n",
    "                        repetitions = 3, # Number of noise realizations to use\n",
    "                        signal_ids=['LinearChirp', 'CosChirp',], # Signals to use\n",
    "                        complex_noise=False # Real white Gaussian Noise\n",
    "                        ) \n",
    "                        \n",
    "benchmark.run() # Run the test.\n",
    "results_df = benchmark.get_results_as_df() # This formats the results on a DataFrame\n",
    "results_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pink noise\n",
    "Let's first import a function to generate colored noise, and later pass it as a parameter to the ```Benchmark``` class constructor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from utils import voss\n",
    "\n",
    "#Generates pink noise using the Voss-McCartney algorithm.\n",
    "noise_fun = lambda N : voss(N,)\n",
    "n = noise_fun(1024)\n",
    "\n",
    "f, Pxx_den = sg.welch(n)\n",
    "plt.semilogy(f, Pxx_den)\n",
    "plt.xlabel('frequency')\n",
    "plt.ylabel('PSD')\n",
    "plt.title('\"Pink\" Noise')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running benchmark...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 2/2 [00:00<00:00, 106.15it/s]\n",
      "100%|██████████| 2/2 [00:00<00:00, 166.67it/s]\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Method</th>\n",
       "      <th>Parameter</th>\n",
       "      <th>Signal_id</th>\n",
       "      <th>Repetition</th>\n",
       "      <th>40</th>\n",
       "      <th>50</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>35.191254</td>\n",
       "      <td>35.957057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>35.210970</td>\n",
       "      <td>35.960973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>36.105207</td>\n",
       "      <td>36.592537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>40.903732</td>\n",
       "      <td>46.124983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>41.337536</td>\n",
       "      <td>46.151734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>40.517168</td>\n",
       "      <td>45.670656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>21.463604</td>\n",
       "      <td>21.583236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>21.182747</td>\n",
       "      <td>21.645561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>21.755696</td>\n",
       "      <td>21.611189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>34.107279</td>\n",
       "      <td>37.318161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>35.669359</td>\n",
       "      <td>37.793854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>35.873981</td>\n",
       "      <td>37.461903</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Method Parameter    Signal_id  Repetition         40         50\n",
       "6   Method 1  ((), {})     CosChirp           0  35.191254  35.957057\n",
       "7   Method 1  ((), {})     CosChirp           1  35.210970  35.960973\n",
       "8   Method 1  ((), {})     CosChirp           2  36.105207  36.592537\n",
       "0   Method 1  ((), {})  LinearChirp           0  40.903732  46.124983\n",
       "1   Method 1  ((), {})  LinearChirp           1  41.337536  46.151734\n",
       "2   Method 1  ((), {})  LinearChirp           2  40.517168  45.670656\n",
       "9   Method 2  ((), {})     CosChirp           0  21.463604  21.583236\n",
       "10  Method 2  ((), {})     CosChirp           1  21.182747  21.645561\n",
       "11  Method 2  ((), {})     CosChirp           2  21.755696  21.611189\n",
       "3   Method 2  ((), {})  LinearChirp           0  34.107279  37.318161\n",
       "4   Method 2  ((), {})  LinearChirp           1  35.669359  37.793854\n",
       "5   Method 2  ((), {})  LinearChirp           2  35.873981  37.461903"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "benchmark = Benchmark(task = 'denoising', # defines the default performance function\n",
    "                        methods = my_methods, # dictionary of methods\n",
    "                        N = 256,  # Length of the signals\n",
    "                        SNRin = [40, 50], # SNRs to use during the test\n",
    "                        repetitions = 3, # Number of noise realizations to use\n",
    "                        signal_ids=['LinearChirp', 'CosChirp',], # Signals to use\n",
    "                        complex_noise=noise_fun, # \"Pink\" Noise\n",
    "                        verbosity=0,\n",
    "                        ) \n",
    "                        \n",
    "benchmark.run() # Run the test.\n",
    "results_df = benchmark.get_results_as_df() # This formats the results on a DataFrame\n",
    "results_df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
