{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# MCSM-Benchs: Creating benchmarks of MCS Methods\n",
    "\n",
    "We introduce a public, open-source, Python-based toolbox for benchmarking multi-component signal analysis methods, implemented either in Python or Matlab.\n",
    "\n",
    "The goal of this toolbox is providing the signal-processing community with a common framework that allows researcher-independent comparisons between methods and favors reproducible research.\n",
    "\n",
    "With the purpose of making this toolbox more useful, the methods to compare, the tests, the signal generation code and the performance evaluation functions were conceived as different modules, so that one can modify them independently. The only restriction this pose is that the methods should satisfy some requirements regarding the shape of their input and output parameters.\n",
    "\n",
    "On the one hand, the tests and the performance evaluation functions, are encapsulated in the class `Benchmark`. On the other hand, the signals used in this benchmark are generated by the methods in the class `SignalBank`.\n",
    "\n",
    "In order to compare different methods with possibly different parameters, we need to set up a few things before running the benchmark. A `Benchmark` object receives some input parameters to configure the test:\n",
    "- `task`: This could be `'denoising'` or `'detection'`,`'component_denoising'` or `'inst_frequency'`. The first one compute the quality reconstruction factor (QRF) using the output of the method, whereas the second simply consist in detecting whether a signal is present or not. Finally, `'component_denoising'` compares the QRF component wise, and '`inst_frequency'` computes the mean squared error between estimations of the instantaneous frequency\n",
    "- `N`: The length of the simulation, i.e. how many samples should the signals have.\n",
    "- `methods`: A dictionary of methods. Each entry of this dictionary corresponds to the function that implements each of the desired methods.\n",
    "- `parameters`: A dictionary of parameters. Each entry of this dictionary corresponds to iterator with positional and/or keyword arguments. In order to know which parameters should be passed to each method, the keys of this dictionary should be the same as those corresponding to the individual methods in the corresponding dictionary. An example of this is showed in below.\n",
    "- `SNRin`: A list or tuple of values of SNR to test.\n",
    "- `repetitions`: The number of times the experiment should be repeated with different realizations of noise.\n",
    "- `signal_ids`: A list of signal ids (corresponding to the names of the signal in the class '`SignalBank`') can be passed here in order to test the methods on those signals. Optionally, the user can pass a dictionary where each key is used as an identifier, and the corresponding value can be a numpy array with a personalized signal."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A dummy test \n",
    "First let us define a dummy method for testing. Methods should receive a numpy array with shape  ```(N,)``` where `N` is the number of time samples of the signal. Additionally, they can receive any number of positional or keyword arguments to allow testing different combinations of input parameters. The shape of the output depends on the task (signal denoising or detection). So the recommended signature of a method should be the following:\n",
    "\n",
    " `output = a_method(noisy_signal, *args, **kwargs) `.\n",
    "\n",
    "If one set `task='denoising'`, `output` shoud be a `(N,)` numpy array, i.e. the same shape as the input parameter `noisy_signal`, whereas if `task='detection'`, the output should be boolean (`0` or `False` for no signal, and `1` or `True` otherwise).\n",
    "\n",
    "After this, we need to create a *dictionary of methods* to pass the `Benchmark` object at the moment of instantiation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from numpy import pi as pi\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "from mcsm_benchmarks.Benchmark import Benchmark\n",
    "from mcsm_benchmarks.ResultsInterpreter import ResultsInterpreter\n",
    "from mcsm_benchmarks.SignalBank import SignalBank\n",
    "from utils import spectrogram_thresholding, get_stft"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating a dictionary of methods\n",
    "\n",
    "Let's create a dictionary of methods to benchmark. As as example, we will compare two strategies for spectrogram thresholding.\n",
    "The first one is hard thresholding, in which the thresholding function is defined as:\n",
    "The second one is soft thresholding, here defined as:\n",
    "\n",
    "These two approaches are implemented in the python function ```thresholding(signal, lam, fun='hard')``` function, which receives a signal to clean, a positional argument ```lam``` and a keyword argument ```fun``` that can be either ```hard``` or ```soft```.\n",
    " \n",
    "Our dictionary of methods will consist then in two methods: hard thresholding and soft thresholding.\n",
    "For both approaches, let's use a value of ```lam=1.0``` for now."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def method_1(noisy_signal, *args, **kwargs):\n",
    "    # If additional input parameters are needed, they can be passed in a tuple using \n",
    "    # *args or **kwargs and then parsed.\n",
    "    xr = spectrogram_thresholding(noisy_signal,1.0,fun='hard')\n",
    "    return xr\n",
    "\n",
    "def method_2(noisy_signal, *args, **kwargs):\n",
    "    # If additional input parameters are needed, they can be passed in a tuple using \n",
    "    # *args or **kwargs and then parsed.\n",
    "    xr = spectrogram_thresholding(noisy_signal,2.0,fun='soft') \n",
    "    return xr\n",
    "\n",
    "# Create a dictionary of the methods to test.\n",
    "my_methods = {\n",
    "    'Method 1': method_1, \n",
    "    'Method 2': method_2,\n",
    "    }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The variable `params` in the example above allows us to pass some parameters to our method. This would be useful for testing a single method with several combination of input parameters. In order to do this, we should give the `Benchmark` object a *dictionary of parameters*. An example of this functionality is showed in the next section. For now, lets set the input parameter `parameters = None`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are ready to instantiate a `Benchmark` object and run a test using the proposed methods and parameters. The benchmark constructor receives a name of a task (which defines the performance function of the test), a dictionary of the methods to test, the desired length of the signals used in the simulation, a dictionary of different parameters that should be passed to the methods, an array with different values of SNR to test, and the number of repetitions that should be used for each test. Once the object is created, use the class method `run_test()` to start the experiments.\n",
    "\n",
    "*Remark 1: You can use the ```verbosity``` parameter to show less or more messages during the progress of the experiments. There are 6 levels of verbosity, from ```verbosity=0``` (indicate just the start and the end of the experiments) to ```verbostiy = 5``` (show each method and parameter progress)*\n",
    "\n",
    "*Remark 2: Parallelize the experiments is also possible by passing the parameter ```parallelize = True```. *"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running benchmark...\n",
      "- Signal LinearChirp\n",
      "-- SNR: 10 dB\n",
      "--- Method: Method 1\n",
      "---- Parameters Combination: 0\n",
      "--- Method: Method 2\n",
      "---- Parameters Combination: 0\n",
      "-- SNR: 20 dB\n",
      "--- Method: Method 1\n",
      "---- Parameters Combination: 0\n",
      "--- Method: Method 2\n",
      "---- Parameters Combination: 0\n",
      "- Signal CosChirp\n",
      "-- SNR: 10 dB\n",
      "--- Method: Method 1\n",
      "---- Parameters Combination: 0\n",
      "--- Method: Method 2\n",
      "---- Parameters Combination: 0\n",
      "-- SNR: 20 dB\n",
      "--- Method: Method 1\n",
      "---- Parameters Combination: 0\n",
      "--- Method: Method 2\n",
      "---- Parameters Combination: 0\n",
      "The test has finished.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "benchmark = Benchmark(task = 'denoising',\n",
    "                        methods = my_methods,\n",
    "                        N = 256, \n",
    "                        SNRin = [10,20], \n",
    "                        repetitions = 3,\n",
    "                        signal_ids=['LinearChirp', 'CosChirp',],\n",
    "                        verbosity=4, \n",
    "                        parallelize=False)\n",
    "                        \n",
    "benchmark.run_test() # Run the test. my_results is a dictionary with the results for each of the variables of the simulation.\n",
    "benchmark.save_to_file('saved_benchmark') # Save the benchmark to a file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "same_benchmark = Benchmark.load_benchmark('saved_benchmark') # Load the benchmark from a file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have the results of the test in a nested dictionary called `my_results`. In order to get the results in a human-readable way using a `DataFrame`, and also for further analysis and reproducibility, we can use the class method `get_results_as_df()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Method</th>\n",
       "      <th>Parameter</th>\n",
       "      <th>Signal_id</th>\n",
       "      <th>Repetition</th>\n",
       "      <th>10</th>\n",
       "      <th>20</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>13.287489</td>\n",
       "      <td>23.596905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>13.216430</td>\n",
       "      <td>23.661788</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>12.782612</td>\n",
       "      <td>23.233935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>13.245828</td>\n",
       "      <td>23.613251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>13.504385</td>\n",
       "      <td>23.940328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Method 1</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>12.786350</td>\n",
       "      <td>23.111165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>15.228535</td>\n",
       "      <td>26.107708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>16.094318</td>\n",
       "      <td>27.080233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>CosChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>14.074812</td>\n",
       "      <td>25.103524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>0</td>\n",
       "      <td>16.258936</td>\n",
       "      <td>27.128722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>1</td>\n",
       "      <td>18.878398</td>\n",
       "      <td>29.035166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Method 2</td>\n",
       "      <td>((), {})</td>\n",
       "      <td>LinearChirp</td>\n",
       "      <td>2</td>\n",
       "      <td>16.345291</td>\n",
       "      <td>26.436254</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Method Parameter    Signal_id  Repetition         10         20\n",
       "6   Method 1  ((), {})     CosChirp           0  13.287489  23.596905\n",
       "7   Method 1  ((), {})     CosChirp           1  13.216430  23.661788\n",
       "8   Method 1  ((), {})     CosChirp           2  12.782612  23.233935\n",
       "0   Method 1  ((), {})  LinearChirp           0  13.245828  23.613251\n",
       "1   Method 1  ((), {})  LinearChirp           1  13.504385  23.940328\n",
       "2   Method 1  ((), {})  LinearChirp           2  12.786350  23.111165\n",
       "9   Method 2  ((), {})     CosChirp           0  15.228535  26.107708\n",
       "10  Method 2  ((), {})     CosChirp           1  16.094318  27.080233\n",
       "11  Method 2  ((), {})     CosChirp           2  14.074812  25.103524\n",
       "3   Method 2  ((), {})  LinearChirp           0  16.258936  27.128722\n",
       "4   Method 2  ((), {})  LinearChirp           1  18.878398  29.035166\n",
       "5   Method 2  ((), {})  LinearChirp           2  16.345291  26.436254"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_df = benchmark.get_results_as_df() # This formats the results on a DataFrame\n",
    "results_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7ff8c9f502e0>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb = SignalBank(N=1024)\n",
    "s = sb.signal_linear_chirp()\n",
    "noise = np.random.randn(1024)\n",
    "x = Benchmark.sigmerge(s, noise, 15)\n",
    "\n",
    "xr = spectrogram_thresholding(x,1.0,'hard')\n",
    "\n",
    "fig,ax = plt.subplots(1,1)\n",
    "ax.plot(s,label='Original Signal')\n",
    "ax.plot(xr,alpha=0.5,label='Recovered Signal')\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the DataFrame show the results ordered by columns. The first column corresponds to the method identification, and the values are taken from the keys of the dictionary of methods. The second column enumerates the parameters used (more on this on the next section). The third column corresponds to the signal identification, using the signal identification values from the `SignalBank` class. The next column shows the number of repetition of the experiment. Finally, the remaining columns show the results obtained for the SNR values used for each experiment. Since `task = 'denoising'`, these values correspond to the QRF computed as `QRF = 10*np.log10(E(s)/E(s-sr))`, where `E(x)` is the energy of `x`, and `s` and `sr` are the noiseless signal and the reconstructed signal respectively."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Passing different parameters to the methods.\n",
    "It is common that a method depends on certain input parameters (thresholds, multiplicative factors, etc). Therefore, it would be useful that the tests could also be repeated with different parameters, instead of creating multiple versions of one method. We can pass an array of parameters to a method provided it parses them internally. In order to indicate the benchmark which parameters combinations should be given to each method, a dictionary of parameters can be given. \n",
    "\n",
    "Let us now create this dictionary. The parameters combinations should be given in a tuple of tuples, so that each internal tuple is passed as the additional parameter (the corresponding method, of course, should implement how to deal with the variable number of input parameters). For this to work, **the keys of this dictionary should be the same as those of the methods dictionary**. \n",
    "\n",
    "We can now see more in detail how to pass different parameters to our methods. For instance, let's consider a function that depends on two thresholds `thr1` (a positional argument) and `thr2` (a keyword argument):"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let us create a method that wraps the previous function and then define the dictionary of methods for our benchmark. Notice that the method should distribute the parameters in the tuple `params`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def method_1(noisy_signal, *args, **kwargs):\n",
    "    # If additional input parameters are needed, they can be passed in a tuple using \n",
    "    # *args or **kwargs and then parsed.\n",
    "    xr = spectrogram_thresholding(noisy_signal,*args,**kwargs)\n",
    "    return xr\n",
    "\n",
    "def method_2(noisy_signal, *args, **kwargs):\n",
    "    # If additional input parameters are needed, they can be passed in a tuple using \n",
    "    # *args or **kwargs and then parsed.\n",
    "    xr = spectrogram_thresholding(noisy_signal,*args,**kwargs) \n",
    "    return xr\n",
    "\n",
    "# Create a dictionary of the methods to test.\n",
    "my_methods = {\n",
    "    'Method 1': method_1, \n",
    "    'Method 2': method_2,\n",
    "    }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Having done this, we can define the different combinations of parameters using the corresponding dictionary:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[((1.0,), {'fun': 'hard'}), ((2.0,), {'fun': 'hard'}), ((3.0,), {'fun': 'hard'})]\n"
     ]
    }
   ],
   "source": [
    "# Create a dictionary of the different combinations of thresholds to test.\n",
    "# Remember the keys of this dictionary should be same as the methods dictionary.\n",
    "my_parameters = {\n",
    "    'Method 1': [((thr,),{'fun': 'hard',}) for thr in np.arange(1.0,4.0,1.0)], \n",
    "    'Method 2': [((thr,),{'fun': 'soft',}) for thr in np.arange(1.0,4.0,1.0)],\n",
    "}\n",
    "\n",
    "print(my_parameters['Method 1'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So now we have four combinations of input parameters for `another_method()`, that will be passed one by one to the method so that all the experiments will be carried out for each of the combinations. Let us set the benchmark and run a test using this new configuration of methods and parameters. After that, we can use the `Benchmark` class method `get_results_as_df()` to obtain a table with the results as before:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running benchmark...\n",
      "- Signal LinearChirp\n",
      "-- SNR: 10 dB\n",
      "--- Method: Method 1\n",
      "---- Parameters Combination: 0\n",
      "---- Parameters Combination: 1\n",
      "---- Parameters Combination: 2\n",
      "--- Method: Method 2\n",
      "---- Parameters Combination: 0\n",
      "---- Parameters Combination: 1\n",
      "---- Parameters Combination: 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-- SNR: 20 dB\n",
      "--- Method: Method 1\n",
      "---- Parameters Combination: 0\n",
      "---- Parameters Combination: 1\n",
      "---- Parameters Combination: 2\n",
      "--- Method: Method 2\n",
      "---- Parameters Combination: 0\n",
      "---- Parameters Combination: 1\n",
      "---- Parameters Combination: 2\n",
      "- Signal CosChirp\n",
      "-- SNR: 10 dB\n",
      "--- Method: Method 1\n",
      "---- Parameters Combination: 0\n",
      "---- Parameters Combination: 1\n",
      "---- Parameters Combination: 2\n",
      "--- Method: Method 2\n",
      "---- Parameters Combination: 0\n",
      "---- Parameters Combination: 1\n",
      "---- Parameters Combination: 2\n",
      "-- SNR: 20 dB\n",
      "--- Method: Method 1\n",
      "---- Parameters Combination: 0\n",
      "---- Parameters Combination: 1\n",
      "---- Parameters Combination: 2\n",
      "--- Method: Method 2\n",
      "---- Parameters Combination: 0\n",
      "---- Parameters Combination: 1\n",
      "---- Parameters Combination: 2\n",
      "The test has finished.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "benchmark = Benchmark(task = 'denoising',\n",
    "                        methods = my_methods,\n",
    "                        parameters=my_parameters,\n",
    "                        N = 256, \n",
    "                        SNRin = [10,20], \n",
    "                        repetitions = 3,\n",
    "                        signal_ids=['LinearChirp', 'CosChirp',],\n",
    "                        verbosity=4, \n",
    "                        parallelize=False)\n",
    "                        \n",
    "benchmark.run_test() # Run the test. my_results is a dictionary with the results for each of the variables of the simulation.\n",
    "benchmark.save_to_file('saved_benchmark') # Save the benchmark to a file."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, the experiments have been repeated for every combination of parameters, listed in the second column of the table as `Parameter`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generating plots with the Results Interpreter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "linkText": "Export to plot.ly",
        "plotlyServerURL": "https://plot.ly",
        "showLink": false
       },
       "data": [
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.29693743811614354,
           0.3410082877472093
          ],
          "arrayminus": [
           0.29693743811614354,
           0.3410082877472093
          ]
         },
         "hovertemplate": "Method + Param=Method 1((1.0,), {'fun': 'hard'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 1((1.0,), {'fun': 'hard'})",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 1((1.0,), {'fun': 'hard'})",
         "offsetgroup": "Method 1((1.0,), {'fun': 'hard'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          13.178854238479218,
          23.554914763174043
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.947974019851192,
           0.7206983307535919
          ],
          "arrayminus": [
           0.947974019851192,
           0.7206983307535919
          ]
         },
         "hovertemplate": "Method + Param=Method 1((2.0,), {'fun': 'hard'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 1((2.0,), {'fun': 'hard'})",
         "marker": {
          "color": "#EF553B",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 1((2.0,), {'fun': 'hard'})",
         "offsetgroup": "Method 1((2.0,), {'fun': 'hard'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          18.585994019418134,
          27.3133608096921
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           1.1578315441994345,
           0.8420742669631609
          ],
          "arrayminus": [
           1.1578315441994345,
           0.8420742669631609
          ]
         },
         "hovertemplate": "Method + Param=Method 1((3.0,), {'fun': 'hard'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 1((3.0,), {'fun': 'hard'})",
         "marker": {
          "color": "#00cc96",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 1((3.0,), {'fun': 'hard'})",
         "offsetgroup": "Method 1((3.0,), {'fun': 'hard'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          19.08751415732958,
          27.77380607922285
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.8504959267142317,
           0.7188183359828155
          ],
          "arrayminus": [
           0.8504959267142317,
           0.7188183359828155
          ]
         },
         "hovertemplate": "Method + Param=Method 2((1.0,), {'fun': 'soft'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 2((1.0,), {'fun': 'soft'})",
         "marker": {
          "color": "#ab63fa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 2((1.0,), {'fun': 'soft'})",
         "offsetgroup": "Method 2((1.0,), {'fun': 'soft'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          16.85603186365213,
          26.43659373810732
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           1.214983703212278,
           1.0989079384793148
          ],
          "arrayminus": [
           1.214983703212278,
           1.0989079384793148
          ]
         },
         "hovertemplate": "Method + Param=Method 2((2.0,), {'fun': 'soft'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 2((2.0,), {'fun': 'soft'})",
         "marker": {
          "color": "#FFA15A",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 2((2.0,), {'fun': 'soft'})",
         "offsetgroup": "Method 2((2.0,), {'fun': 'soft'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          17.16087477299465,
          27.53338068305059
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.6785108362986539,
           0.9668398080209065
          ],
          "arrayminus": [
           0.6785108362986539,
           0.9668398080209065
          ]
         },
         "hovertemplate": "Method + Param=Method 2((3.0,), {'fun': 'soft'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 2((3.0,), {'fun': 'soft'})",
         "marker": {
          "color": "#19d3f3",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 2((3.0,), {'fun': 'soft'})",
         "offsetgroup": "Method 2((3.0,), {'fun': 'soft'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          13.017337991937026,
          25.858506047905205
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "group",
        "legend": {
         "title": {
          "text": "Method + Param"
         },
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "LinearChirp"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "SNRin"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "QRF"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "linkText": "Export to plot.ly",
        "plotlyServerURL": "https://plot.ly",
        "showLink": false
       },
       "data": [
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.223146292688135,
           0.18827170816948374
          ],
          "arrayminus": [
           0.223146292688135,
           0.18827170816948374
          ]
         },
         "hovertemplate": "Method + Param=Method 1((1.0,), {'fun': 'hard'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 1((1.0,), {'fun': 'hard'})",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 1((1.0,), {'fun': 'hard'})",
         "offsetgroup": "Method 1((1.0,), {'fun': 'hard'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          13.09551032074983,
          23.497542656436167
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.9864687158111215,
           0.6430064182921119
          ],
          "arrayminus": [
           0.9864687158111215,
           0.6430064182921119
          ]
         },
         "hovertemplate": "Method + Param=Method 1((2.0,), {'fun': 'hard'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 1((2.0,), {'fun': 'hard'})",
         "marker": {
          "color": "#EF553B",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 1((2.0,), {'fun': 'hard'})",
         "offsetgroup": "Method 1((2.0,), {'fun': 'hard'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          17.347716784068272,
          26.166888863202786
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           1.187956759217084,
           0.7714425368466906
          ],
          "arrayminus": [
           1.187956759217084,
           0.7714425368466906
          ]
         },
         "hovertemplate": "Method + Param=Method 1((3.0,), {'fun': 'hard'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 1((3.0,), {'fun': 'hard'})",
         "marker": {
          "color": "#00cc96",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 1((3.0,), {'fun': 'hard'})",
         "offsetgroup": "Method 1((3.0,), {'fun': 'hard'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          17.517821236886594,
          26.631984402921546
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.7199118964255735,
           0.5516290289580098
          ],
          "arrayminus": [
           0.7199118964255735,
           0.5516290289580098
          ]
         },
         "hovertemplate": "Method + Param=Method 2((1.0,), {'fun': 'soft'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 2((1.0,), {'fun': 'soft'})",
         "marker": {
          "color": "#ab63fa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 2((1.0,), {'fun': 'soft'})",
         "offsetgroup": "Method 2((1.0,), {'fun': 'soft'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          16.187540246785137,
          25.705809842810407
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.8272485272384467,
           0.8070227279025275
          ],
          "arrayminus": [
           0.8272485272384467,
           0.8070227279025275
          ]
         },
         "hovertemplate": "Method + Param=Method 2((2.0,), {'fun': 'soft'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 2((2.0,), {'fun': 'soft'})",
         "marker": {
          "color": "#FFA15A",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 2((2.0,), {'fun': 'soft'})",
         "offsetgroup": "Method 2((2.0,), {'fun': 'soft'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          15.132555060275914,
          26.09715484097943
         ],
         "yaxis": "y"
        },
        {
         "alignmentgroup": "True",
         "error_x": {
          "array": [
           "10",
           "20"
          ]
         },
         "error_y": {
          "array": [
           0.3798493601353264,
           0.627031716009798
          ],
          "arrayminus": [
           0.3798493601353264,
           0.627031716009798
          ]
         },
         "hovertemplate": "Method + Param=Method 2((3.0,), {'fun': 'soft'})<br>SNRin=%{x}<br>QRF=%{y}<extra></extra>",
         "legendgroup": "Method 2((3.0,), {'fun': 'soft'})",
         "marker": {
          "color": "#19d3f3",
          "pattern": {
           "shape": ""
          }
         },
         "name": "Method 2((3.0,), {'fun': 'soft'})",
         "offsetgroup": "Method 2((3.0,), {'fun': 'soft'})",
         "orientation": "v",
         "showlegend": true,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "10",
          "20"
         ],
         "xaxis": "x",
         "y": [
          10.717040746456037,
          23.872402880487726
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "group",
        "legend": {
         "title": {
          "text": "Method + Param"
         },
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "CosChirp"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "SNRin"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "QRF"
         }
        }
       }
      }
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Summary interactive plots with Plotly\n",
    "from plotly.offline import  iplot\n",
    "interpreter = ResultsInterpreter(benchmark)\n",
    "figs = interpreter.get_summary_plotlys(bars=True)\n",
    "for fig in figs:\n",
    "    iplot(fig)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Checking elapsed time for each method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mean</th>\n",
       "      <th>Std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Method 1-((1.0,), {'fun': 'hard'})</th>\n",
       "      <td>0.029918</td>\n",
       "      <td>0.002808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Method 1-((2.0,), {'fun': 'hard'})</th>\n",
       "      <td>0.031169</td>\n",
       "      <td>0.000630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Method 1-((3.0,), {'fun': 'hard'})</th>\n",
       "      <td>0.032047</td>\n",
       "      <td>0.000585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Method 2-((1.0,), {'fun': 'soft'})</th>\n",
       "      <td>0.035945</td>\n",
       "      <td>0.000724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Method 2-((2.0,), {'fun': 'soft'})</th>\n",
       "      <td>0.034309</td>\n",
       "      <td>0.000437</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Method 2-((3.0,), {'fun': 'soft'})</th>\n",
       "      <td>0.029069</td>\n",
       "      <td>0.000873</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        Mean       Std\n",
       "Method 1-((1.0,), {'fun': 'hard'})  0.029918  0.002808\n",
       "Method 1-((2.0,), {'fun': 'hard'})  0.031169  0.000630\n",
       "Method 1-((3.0,), {'fun': 'hard'})  0.032047  0.000585\n",
       "Method 2-((1.0,), {'fun': 'soft'})  0.035945  0.000724\n",
       "Method 2-((2.0,), {'fun': 'soft'})  0.034309  0.000437\n",
       "Method 2-((3.0,), {'fun': 'soft'})  0.029069  0.000873"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = interpreter.elapsed_time_summary()\n",
    "df"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.15 ('.venv': poetry)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "b570b39bfc168d016e4ca94377b5ca5dd1b2801911d7fb4ef826f34fdaae4407"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
